#summary Steps to use Eneter Protobuf Serializer

= Getting Started =

== Environment ==
Eneter.ProtoBuf.Serializer integrates Protocol Buffers with Eneter Messaging Framework. Therefore based on the platform you will need to reference following libraries from your project:
 * *[https://code.google.com/p/protobuf/ protobuf.jar]* - protocol buffer  serializer for Java and Android developed by Google.
 * *[https://code.google.com/p/protobuf-net/ protobuf-net.dll]* protocol buffer serializer for .NET, Windows Phone, Silverlight and Compact Framework developed by Marc Gravell.
 * *[http://www.eneter.net/ProductDownload.htm Eneter.Messaging.Framework (dll, jar)]* - cross-platform framework for interprocess communication.
 * *[http://eneter.net/Downloads/Extensions/EneterProtoBufSerializer/EneterProtoBufSerializer100.zip Eneter.ProtoBuf.Serializer (dll, jar)]* - protocol buffer serializer for Eneter Messaging Framework developed by this project.

Further, you may need a utility application to convert 'proto' files to the source code:
 * *protogen.exe* - to convert 'proto' file to C#.
 * *protoc* - to convert 'proto' files to Java.

These libraries and applications can be downloaded and/or compiled directly from their original pages but in order to simplify the setup Eneter.ProtoBuf.Serializer package includes all of them except Eneter Messaging Framework which is free only for non-commercial use.<br/>
Therefore to get everything what is needed you need to do two downloads:
 * *[http://eneter.net/Downloads/Extensions/EneterProtoBufSerializer/EneterProtoBufSerializer100.zip Eneter.ProtoBuf.Serializer package]* - includes protocol buffer serializer for Eneter and protocol buffer libraries and utility applications for 'proto' files.
 * *[http://www.eneter.net/ProductDownload.htm Eneter.Messaging.Framework]* - communication framework that you can download for free if you want to give a try or your project is non-commercial.


